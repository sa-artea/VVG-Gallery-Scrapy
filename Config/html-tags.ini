[INDEX]
; index html tags to create the gallery
; four keys to execute the scrap with beatifulsoup4
; divs is the HTML div of interest
; attrs is the HTML attribute of interest
; element is a secondary HTML div of interest
; column is the dataframe schema feature name
divs = a
attrs = {
    "class": "collection-art-object-wrapper"}
element = None
cleanup = None
column = None
[ID]
; ID element in the gallery and local folder name
divs = a
attrs = {
    "class": "collection-art-object-wrapper",
    "href": re.compile("^/en/collection/"),
}
element = href
cleanup =
column = ID
[TITLE]
; tittle of the element in the gallery
divs = 
attrs = 
element =
cleanup =
column = TITLE
[COLLECTION_URL]
; recovered element (paint) URL
divs = 
attrs = 
element =
cleanup =
column = COLLECTION_URL
[DOWNLOAD_URL]
; direct image URL/link for the image in the gallery
divs = 
attrs = 
element =
cleanup =
column = DOWNLOAD_URL
[HAS_PICTURE]
; boolean if there is a picture file in the local folder
divs = 
attrs = 
element =
cleanup =
column = HAS_PICTURE
[DESCRIPTION]
; JSON with the description of the element
divs = 
attrs = 
element =
cleanup =
column = DESCRIPTION
[SEARCH_TAGS]
; JSON with the collection tags of the element
divs = 
attrs = 
element =
cleanup =
column = SEARCH_TAGS
[OBJ_DATA]
; JSON with the museum object data of the element
divs = 
attrs = 
element =
cleanup =
column = OBJ_DATA
[RELATED_WORKS]
; JSON with the related work text and URLs of the element
divs = 
attrs = 
element =
cleanup =
column = RELATED_WORKS
[IMG_DATA]
; numpy RGW matrix created from original image
divs = 
attrs = 
element =
cleanup =
column = IMG_DATA
[IMG_SHAPE]
; numpy array shape for the RGW matrix
divs = 
attrs = 
element =
cleanup =
column = IMG_SHAPE